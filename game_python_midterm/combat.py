import general_mechanics


def shield_regeneration(shield_level):
    """ Add regeneration points

        Adds the shield level points based on current shield level
        
    :param shield_level: an integer that showst the current shield level
    :precondition: none
    :postcondition: none
    :return: an updated shield level. An integer
    >>> shield_regeneration(6)
    8
    >>> shield_regeneration(-1)
    1
    >>> shield_regeneration(9)
    10
    >>> shield_regeneration(11)
    11
    """
    if shield_level <= 8:
        shield_level += 2
        print("\nAs you walk in peace, you get a notification that your shield had regenerated by 2 hp\n")

    elif shield_level == 9:
        shield_level += 1
        print("\nAs you walk in peace, you get a notification that your shield had regenerated by 1 hp\n")
    return shield_level


def monster_check(player_info):
    """Determine presence of an enemy monster_check

    The monster will have a 25% chance of showing up to the player
    
    :param: none
    :precondition: none
    :postcondition: determine if an enemy monster is present, if not, activates shield regeneration
    :return: a boolean value True or False"""

    if general_mechanics.roll_die(4) == 1:
        print("\nYou encountered a monster\n")
        return True
    else:

        player_info[2] = shield_regeneration(player_info[2])

        return False  


def combat_check(player_hp):
    """Check if the user wants to fight the monster

    Checks if the user wants to fight the monster. If the user decides to flee there will be a 10% chance of being hit by the monster by 1-4 health points. If the user fights the monster, the 

    :param: player initial health points
    :precondition: none
    :postcondition: none
    :return: player hp after he encounters the monster. An integer
    """
    print(f"Possible actions: {general_mechanics.POSSIBLE_ACTIONS_2()}")
    user_decision = input("Do you want to fight them? >>> ").lower()

    # Ask user for fight or flee decision, validate user input
    while user_decision != "fight" and user_decision != "flee" and user_decision != "quit" :
      user_decision = input("\nInvalid input. Do you want to fight them? type fight or flee or type quit to quit the game\n>>> ").lower()
    
    # Execute fleeing routine
    if user_decision == "flee":
        print("\nYou decided to avoid the fight...\n")
        if general_mechanics.roll_die(10) == 1:
            print("But the monster spat on you and the substances burns your shield")
            hitpoints = general_mechanics.roll_die(4)
            player_hp -= hitpoints
            print(f"\nThe spit reduced your shield by {hitpoints} points.")
    # Execute fight routine
    elif user_decision == "quit":
        return 0
    else:
        player_hp = fight(player_hp)
        if player_hp > 0:
          print("\nYou exhale en evil laughter as the monster falls dead in front of you. You've won this fight!\n")
        else:
          print("\nYour vision starts to turn black as your life bleeds out of you.\n")       
    return player_hp     


def fight(player_hp):
    monster_hp = 5
    both_alive = True
    
    while both_alive:
        players_die = general_mechanics.roll_die(20)
        monsters_die = general_mechanics.roll_die(20)
        if players_die == monsters_die:
            print(f"It's a draw! You both rolled a {players_die}")
        
        # Determine which combatant takes damage
        else:
            if players_die > monsters_die:
                monster_hp -= general_mechanics.roll_die(6)  
                
                # Counter-attack
                if monster_hp > 0:
                    player_hp -= general_mechanics.roll_die(6)
            else:
                player_hp -= general_mechanics.roll_die(6)  
              
              # Counter-attack
                if player_hp > 0:
                    monster_hp -= general_mechanics.roll_die(6)


        print(f"\nAfter this round you are left with {player_hp} hp and the monster is left with {monster_hp} hp.\n")          
        # Check if someone's dead 
        if monster_hp <= 0 or player_hp <= 0:
            both_alive = False
    return player_hp                

